/*
 * Copyright (c) 2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */


#include <stdio.h>
#include "memIO.h"
#define MEM_BASE 0x43c00000

int main()
{
	int fd;
	  void *map_base;

	  if((fd = open("/dev/mem", O_RDWR | O_SYNC)) == -1) FATAL;
	  if(debug) printf("/dev/mem opened.\n");
	  fflush(stdout);

	  /* Map one page */
	  map_base = mmap(0, MAP_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, MEM_BASE & ~MAP_MASK);
	  if(map_base == (void *) -1) FATAL;
	  if(debug) printf("Memory mapped at address %p.\n", map_base);
	  fflush(stdout);

	  void *virt_addr1 = map_base + (MEM_BASE & MAP_MASK);
	  void *virt_addr2 = map_base + (MEM_BASE+4 & MAP_MASK);
	  void *virt_addr3 = map_base + (MEM_BASE+8 & MAP_MASK);
	  void *virt_addr4 = map_base + (MEM_BASE+12 & MAP_MASK);


	  unsigned long read_result = *((unsigned long *) virt_addr);

	  if(debug) printf("Value at address 0x%X (%p): 0x%X\n", target, virt_addr, read_result);
	  fflush(stdout);



    printf("Hello World\n");
    for(int i=0;i<1e4;i++)
    {
		writeMem(MEM_BASE, 'w', 0x01020304);
		writeMem(MEM_BASE+4, 'w', 0x04030201);


		readMem(MEM_BASE+8, 'w');
		readMem(MEM_BASE+12, 'w');
//		writeMem(MEM_BASE, 'w', 0x02020202);
//		writeMem(MEM_BASE+4, 'w', 0x04030201);
//
//
//		readMem(MEM_BASE+8, 'w');
//		readMem(MEM_BASE+12, 'w');
    }



	  if(munmap(map_base, MAP_SIZE) == -1) FATAL;
	  close(fd);
    return 0;
}
